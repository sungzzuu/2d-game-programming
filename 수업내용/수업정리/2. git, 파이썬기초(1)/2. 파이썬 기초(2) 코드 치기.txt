2.

Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)] on win32

Type "help", "copyright", "credits" or "license()" for more information.

>>>

>>> 1+2

3

>>> 100 -1

99

>>>

>>> 7*52

364

>>> 1024/8

128.0

>>>

>>> 1/2

0.5

>>> 1//2

0

>>> 4/3

1.3333333333333333

>>> 4//3

1

>>> 7 % 3

1

>>> 7.5 %3

1.5

>>> 4 % 2.1

1.9

>>> 3.141592 *(3 * 3)

28.274328

>>> 3.141592 * 3 ** 2

28.274328

>>> pi = 3.141592

>>> pi * 4 ** 2

50.265472

>>> pi * 8 ** 2

201.061888

>>> print(pi)

3.141592

>>> r = 7

>>> area = pi * r ** 2

>>> print(area)

153.938008

>>> r = 11

>>> area = pi * r ** 2

>>> print(area)

380.132632

>>> name1 = "Trump"

>>> name2 = "임시완""

SyntaxError: EOL while scanning string literal

>>> name2 = "임시완"

>>> print(name1)

Trump

>>> print(name2)

임시완

>>> order = 4

>>> pi = 3.141592

>>> name = "Trump"

>>> type(order)

<class 'int'>

>>> type(pi)

<class 'float'>

>>> type(name)

<class 'str'>

>>> 4 > 3

True

>>> 3.5 < -1.3

False

>>> 100 == 100

True

>>> 10 >= 10

True

>>> a = 365 > 366

>>> print(a)

False

>>> type(a)

<class 'bool'>

>>> first = "SungJu"

>>> last = "Yun"

>>> name = first + " " + last

>>> name

'SungJu Yun'

>>> print(name)

SungJu Yun

>>> name * 2

'SungJu YunSungJu Yun'

>>> name * 3

'SungJu YunSungJu YunSungJu Yun'

>>> name[0]

'S'

>>> name[1]

'u'

>>> name[2]

'n'

>>> name[2]

'n'

>>> name[-2]

'u'

>>> name[-0]

'S'

>>> twice = ['momo', 'sana', 'zwi', 'nayun', 'dahyun']

>>> black_pink = ['jisu', 'jeni', 'rose', 'risa']

>>> twice

['momo', 'sana', 'zwi', 'nayun', 'dahyun']

>>> twice.append('jihyo')

>>> twice

['momo', 'sana', 'zwi', 'nayun', 'dahyun', 'jihyo']

>>> twice.sort()

>>> twice

['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi']

>>> len(twice)

6

>>> unite = twice + black_pink

>>> unite

['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']

>>> unite.remove('momo')

>>> unite

['dahyun', 'jihyo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']

>>> unite[0]

'dahyun'

>>> unite[:3]

['dahyun', 'jihyo', 'nayun']

>>> unite[-3:]

['jeni', 'rose', 'risa']

>>> score = {'momo' : 80, 'zwi' : 85, 'sana' : 98}

>>> type(score)

<class 'dict'>

>>> score['momo']

80

>>> score['zwi']

85

>>> score

{'momo': 80, 'zwi': 85, 'sana': 98}

>>> score['nana']

Traceback (most recent call last):

File "<pyshell#77>", line 1, in <module>

score['nana']

KeyError: 'nana'

>>> score['nayun'] = 100

>>> score

{'momo': 80, 'zwi': 85, 'sana': 98, 'nayun': 100}

>>> del score['momo']

>>> score

{'zwi': 85, 'sana': 98, 'nayun': 100}

>>> score.keys()

dict_keys(['zwi', 'sana', 'nayun'])

>>> score.values()

dict_values([85, 98, 100])

>>> 'zwi' in score

True

>>> 'momo' in score

False

>>> score.clear()

>>> score

{}

>>> t1 = (1,2,3)

>>> t2 = (1, )

>>> t3 = ()

>>> t4 = 1,2,3,4

>>> t4

(1, 2, 3, 4)

>>> type(t4)

<class 'tuple'>

>>> t5 = (1, 'a', "park", (1,2))

>>> t1[1:]

(2, 3)

>>> t1 + t5

(1, 2, 3, 1, 'a', 'park', (1, 2))

>>> t4 * t4

Traceback (most recent call last):

File "<pyshell#97>", line 1, in <module>

t4 * t4

TypeError: can't multiply sequence by non-int of type 'tuple'

>>> t4 * 2

(1, 2, 3, 4, 1, 2, 3, 4)

>>> s1 = {1, 2, 3}

>>> s1

{1, 2, 3}

>>> l1 = [1,2,2,2,2,3,3,3,3,5,5,5,5,5]

>>> s1 = set(l1)

>>> s1

{1, 2, 3, 5}

>>> s2 = {3,5,6,7}

>>> s1

{1, 2, 3, 5}

+

>>> s1 + s2

Traceback (most recent call last):

File "<pyshell#106>", line 1, in <module>

s1 + s2

TypeError: unsupported operand type(s) for +: 'set' and 'set'

>>> s1 | s2

{1, 2, 3, 5, 6, 7}

>>> s1 & s2

{3, 5}

>>> s2 -s1

{6, 7}

>>> s1 -s2

{1, 2}

>>> s1.add(8)

>>> s1

{1, 2, 3, 5, 8}

>>> s2.remove(6)

>>> s2

{3, 5, 7}

>>>

 

느낀점 : c/c++언어와 비교하면 매우 편리하고 단순하다. 코딩을 처음 배우는 사람이 사용하면 좋은 언어라는 생각이 들었다. 또 신기한 기능들이 많아서 배울 때 흥미를 느낄 수 있었다. 또 언어를 숙달하는데 많은 시간이 들지 않아서 더 빠른 개발을 할 수 있을 것 같다.